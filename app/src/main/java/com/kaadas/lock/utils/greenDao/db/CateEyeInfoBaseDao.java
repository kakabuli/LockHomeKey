package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.utils.greenDao.bean.CateEyeInfoBase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATE_EYE_INFO_BASE".
*/
public class CateEyeInfoBaseDao extends AbstractDao<CateEyeInfoBase, Long> {

    public static final String TABLENAME = "CATE_EYE_INFO_BASE";

    /**
     * Properties of entity CateEyeInfoBase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CurBellNum = new Property(1, int.class, "curBellNum", false, "CUR_BELL_NUM");
        public final static Property BellVolume = new Property(2, int.class, "bellVolume", false, "BELL_VOLUME");
        public final static Property BellCount = new Property(3, int.class, "bellCount", false, "BELL_COUNT");
        public final static Property Resolution = new Property(4, String.class, "resolution", false, "RESOLUTION");
        public final static Property DeviceId = new Property(5, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property SW = new Property(6, String.class, "SW", false, "SW");
        public final static Property HW = new Property(7, String.class, "HW", false, "HW");
        public final static Property MCU = new Property(8, String.class, "MCU", false, "MCU");
        public final static Property T200 = new Property(9, String.class, "T200", false, "T200");
        public final static Property Macaddr = new Property(10, String.class, "macaddr", false, "MACADDR");
        public final static Property Ipaddr = new Property(11, String.class, "ipaddr", false, "IPADDR");
        public final static Property WifiStrength = new Property(12, int.class, "wifiStrength", false, "WIFI_STRENGTH");
        public final static Property PirEnable = new Property(13, int.class, "pirEnable", false, "PIR_ENABLE");
        public final static Property PirWander = new Property(14, String.class, "pirWander", false, "PIR_WANDER");
        public final static Property SdStatus = new Property(15, int.class, "sdStatus", false, "SD_STATUS");
        public final static Property Gwid = new Property(16, String.class, "gwid", false, "GWID");
    }


    public CateEyeInfoBaseDao(DaoConfig config) {
        super(config);
    }
    
    public CateEyeInfoBaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATE_EYE_INFO_BASE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CUR_BELL_NUM\" INTEGER NOT NULL ," + // 1: curBellNum
                "\"BELL_VOLUME\" INTEGER NOT NULL ," + // 2: bellVolume
                "\"BELL_COUNT\" INTEGER NOT NULL ," + // 3: bellCount
                "\"RESOLUTION\" TEXT," + // 4: resolution
                "\"DEVICE_ID\" TEXT," + // 5: deviceId
                "\"SW\" TEXT," + // 6: SW
                "\"HW\" TEXT," + // 7: HW
                "\"MCU\" TEXT," + // 8: MCU
                "\"T200\" TEXT," + // 9: T200
                "\"MACADDR\" TEXT," + // 10: macaddr
                "\"IPADDR\" TEXT," + // 11: ipaddr
                "\"WIFI_STRENGTH\" INTEGER NOT NULL ," + // 12: wifiStrength
                "\"PIR_ENABLE\" INTEGER NOT NULL ," + // 13: pirEnable
                "\"PIR_WANDER\" TEXT," + // 14: pirWander
                "\"SD_STATUS\" INTEGER NOT NULL ," + // 15: sdStatus
                "\"GWID\" TEXT);"); // 16: gwid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATE_EYE_INFO_BASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CateEyeInfoBase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCurBellNum());
        stmt.bindLong(3, entity.getBellVolume());
        stmt.bindLong(4, entity.getBellCount());
 
        String resolution = entity.getResolution();
        if (resolution != null) {
            stmt.bindString(5, resolution);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(6, deviceId);
        }
 
        String SW = entity.getSW();
        if (SW != null) {
            stmt.bindString(7, SW);
        }
 
        String HW = entity.getHW();
        if (HW != null) {
            stmt.bindString(8, HW);
        }
 
        String MCU = entity.getMCU();
        if (MCU != null) {
            stmt.bindString(9, MCU);
        }
 
        String T200 = entity.getT200();
        if (T200 != null) {
            stmt.bindString(10, T200);
        }
 
        String macaddr = entity.getMacaddr();
        if (macaddr != null) {
            stmt.bindString(11, macaddr);
        }
 
        String ipaddr = entity.getIpaddr();
        if (ipaddr != null) {
            stmt.bindString(12, ipaddr);
        }
        stmt.bindLong(13, entity.getWifiStrength());
        stmt.bindLong(14, entity.getPirEnable());
 
        String pirWander = entity.getPirWander();
        if (pirWander != null) {
            stmt.bindString(15, pirWander);
        }
        stmt.bindLong(16, entity.getSdStatus());
 
        String gwid = entity.getGwid();
        if (gwid != null) {
            stmt.bindString(17, gwid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CateEyeInfoBase entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getCurBellNum());
        stmt.bindLong(3, entity.getBellVolume());
        stmt.bindLong(4, entity.getBellCount());
 
        String resolution = entity.getResolution();
        if (resolution != null) {
            stmt.bindString(5, resolution);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(6, deviceId);
        }
 
        String SW = entity.getSW();
        if (SW != null) {
            stmt.bindString(7, SW);
        }
 
        String HW = entity.getHW();
        if (HW != null) {
            stmt.bindString(8, HW);
        }
 
        String MCU = entity.getMCU();
        if (MCU != null) {
            stmt.bindString(9, MCU);
        }
 
        String T200 = entity.getT200();
        if (T200 != null) {
            stmt.bindString(10, T200);
        }
 
        String macaddr = entity.getMacaddr();
        if (macaddr != null) {
            stmt.bindString(11, macaddr);
        }
 
        String ipaddr = entity.getIpaddr();
        if (ipaddr != null) {
            stmt.bindString(12, ipaddr);
        }
        stmt.bindLong(13, entity.getWifiStrength());
        stmt.bindLong(14, entity.getPirEnable());
 
        String pirWander = entity.getPirWander();
        if (pirWander != null) {
            stmt.bindString(15, pirWander);
        }
        stmt.bindLong(16, entity.getSdStatus());
 
        String gwid = entity.getGwid();
        if (gwid != null) {
            stmt.bindString(17, gwid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CateEyeInfoBase readEntity(Cursor cursor, int offset) {
        CateEyeInfoBase entity = new CateEyeInfoBase( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // curBellNum
            cursor.getInt(offset + 2), // bellVolume
            cursor.getInt(offset + 3), // bellCount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // resolution
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // deviceId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // SW
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // HW
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // MCU
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // T200
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // macaddr
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ipaddr
            cursor.getInt(offset + 12), // wifiStrength
            cursor.getInt(offset + 13), // pirEnable
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // pirWander
            cursor.getInt(offset + 15), // sdStatus
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // gwid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CateEyeInfoBase entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCurBellNum(cursor.getInt(offset + 1));
        entity.setBellVolume(cursor.getInt(offset + 2));
        entity.setBellCount(cursor.getInt(offset + 3));
        entity.setResolution(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeviceId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSW(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHW(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMCU(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setT200(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMacaddr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIpaddr(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWifiStrength(cursor.getInt(offset + 12));
        entity.setPirEnable(cursor.getInt(offset + 13));
        entity.setPirWander(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSdStatus(cursor.getInt(offset + 15));
        entity.setGwid(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CateEyeInfoBase entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CateEyeInfoBase entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CateEyeInfoBase entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
