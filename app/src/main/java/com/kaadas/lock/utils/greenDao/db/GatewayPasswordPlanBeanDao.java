package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.utils.greenDao.bean.GatewayPasswordPlanBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GATEWAY_PASSWORD_PLAN_BEAN".
*/
public class GatewayPasswordPlanBeanDao extends AbstractDao<GatewayPasswordPlanBean, Long> {

    public static final String TABLENAME = "GATEWAY_PASSWORD_PLAN_BEAN";

    /**
     * Properties of entity GatewayPasswordPlanBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserType = new Property(1, int.class, "userType", false, "USER_TYPE");
        public final static Property PasswordNumber = new Property(2, int.class, "passwordNumber", false, "PASSWORD_NUMBER");
        public final static Property PlanType = new Property(3, String.class, "planType", false, "PLAN_TYPE");
        public final static Property DeviceId = new Property(4, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property GatewayId = new Property(5, String.class, "gatewayId", false, "GATEWAY_ID");
        public final static Property Uid = new Property(6, String.class, "uid", false, "UID");
        public final static Property DaysMask = new Property(7, int.class, "daysMask", false, "DAYS_MASK");
        public final static Property StartHour = new Property(8, int.class, "startHour", false, "START_HOUR");
        public final static Property StartMinute = new Property(9, int.class, "startMinute", false, "START_MINUTE");
        public final static Property EndHour = new Property(10, int.class, "endHour", false, "END_HOUR");
        public final static Property EndMinute = new Property(11, int.class, "endMinute", false, "END_MINUTE");
        public final static Property ZigBeeLocalStartTime = new Property(12, long.class, "zigBeeLocalStartTime", false, "ZIG_BEE_LOCAL_START_TIME");
        public final static Property ZigBeeLocalEndTime = new Property(13, long.class, "zigBeeLocalEndTime", false, "ZIG_BEE_LOCAL_END_TIME");
    }


    public GatewayPasswordPlanBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GatewayPasswordPlanBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GATEWAY_PASSWORD_PLAN_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_TYPE\" INTEGER NOT NULL ," + // 1: userType
                "\"PASSWORD_NUMBER\" INTEGER NOT NULL ," + // 2: passwordNumber
                "\"PLAN_TYPE\" TEXT," + // 3: planType
                "\"DEVICE_ID\" TEXT," + // 4: deviceId
                "\"GATEWAY_ID\" TEXT," + // 5: gatewayId
                "\"UID\" TEXT," + // 6: uid
                "\"DAYS_MASK\" INTEGER NOT NULL ," + // 7: daysMask
                "\"START_HOUR\" INTEGER NOT NULL ," + // 8: startHour
                "\"START_MINUTE\" INTEGER NOT NULL ," + // 9: startMinute
                "\"END_HOUR\" INTEGER NOT NULL ," + // 10: endHour
                "\"END_MINUTE\" INTEGER NOT NULL ," + // 11: endMinute
                "\"ZIG_BEE_LOCAL_START_TIME\" INTEGER NOT NULL ," + // 12: zigBeeLocalStartTime
                "\"ZIG_BEE_LOCAL_END_TIME\" INTEGER NOT NULL );"); // 13: zigBeeLocalEndTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GATEWAY_PASSWORD_PLAN_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GatewayPasswordPlanBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserType());
        stmt.bindLong(3, entity.getPasswordNumber());
 
        String planType = entity.getPlanType();
        if (planType != null) {
            stmt.bindString(4, planType);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(5, deviceId);
        }
 
        String gatewayId = entity.getGatewayId();
        if (gatewayId != null) {
            stmt.bindString(6, gatewayId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(7, uid);
        }
        stmt.bindLong(8, entity.getDaysMask());
        stmt.bindLong(9, entity.getStartHour());
        stmt.bindLong(10, entity.getStartMinute());
        stmt.bindLong(11, entity.getEndHour());
        stmt.bindLong(12, entity.getEndMinute());
        stmt.bindLong(13, entity.getZigBeeLocalStartTime());
        stmt.bindLong(14, entity.getZigBeeLocalEndTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GatewayPasswordPlanBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUserType());
        stmt.bindLong(3, entity.getPasswordNumber());
 
        String planType = entity.getPlanType();
        if (planType != null) {
            stmt.bindString(4, planType);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(5, deviceId);
        }
 
        String gatewayId = entity.getGatewayId();
        if (gatewayId != null) {
            stmt.bindString(6, gatewayId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(7, uid);
        }
        stmt.bindLong(8, entity.getDaysMask());
        stmt.bindLong(9, entity.getStartHour());
        stmt.bindLong(10, entity.getStartMinute());
        stmt.bindLong(11, entity.getEndHour());
        stmt.bindLong(12, entity.getEndMinute());
        stmt.bindLong(13, entity.getZigBeeLocalStartTime());
        stmt.bindLong(14, entity.getZigBeeLocalEndTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GatewayPasswordPlanBean readEntity(Cursor cursor, int offset) {
        GatewayPasswordPlanBean entity = new GatewayPasswordPlanBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // userType
            cursor.getInt(offset + 2), // passwordNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // planType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deviceId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gatewayId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // uid
            cursor.getInt(offset + 7), // daysMask
            cursor.getInt(offset + 8), // startHour
            cursor.getInt(offset + 9), // startMinute
            cursor.getInt(offset + 10), // endHour
            cursor.getInt(offset + 11), // endMinute
            cursor.getLong(offset + 12), // zigBeeLocalStartTime
            cursor.getLong(offset + 13) // zigBeeLocalEndTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GatewayPasswordPlanBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserType(cursor.getInt(offset + 1));
        entity.setPasswordNumber(cursor.getInt(offset + 2));
        entity.setPlanType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeviceId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGatewayId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDaysMask(cursor.getInt(offset + 7));
        entity.setStartHour(cursor.getInt(offset + 8));
        entity.setStartMinute(cursor.getInt(offset + 9));
        entity.setEndHour(cursor.getInt(offset + 10));
        entity.setEndMinute(cursor.getInt(offset + 11));
        entity.setZigBeeLocalStartTime(cursor.getLong(offset + 12));
        entity.setZigBeeLocalEndTime(cursor.getLong(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GatewayPasswordPlanBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GatewayPasswordPlanBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GatewayPasswordPlanBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
