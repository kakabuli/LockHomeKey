package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.utils.greenDao.bean.GatewayLockBaseInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GATEWAY_LOCK_BASE_INFO".
*/
public class GatewayLockBaseInfoDao extends AbstractDao<GatewayLockBaseInfo, String> {

    public static final String TABLENAME = "GATEWAY_LOCK_BASE_INFO";

    /**
     * Properties of entity GatewayLockBaseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DeviceUId = new Property(0, String.class, "deviceUId", true, "DEVICE_UID");
        public final static Property GatewayId = new Property(1, String.class, "gatewayId", false, "GATEWAY_ID");
        public final static Property DeviceId = new Property(2, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Macaddr = new Property(3, String.class, "macaddr", false, "MACADDR");
        public final static Property Model = new Property(4, String.class, "model", false, "MODEL");
        public final static Property Firmware = new Property(5, String.class, "firmware", false, "FIRMWARE");
        public final static Property Hwversion = new Property(6, String.class, "hwversion", false, "HWVERSION");
        public final static Property Swversion = new Property(7, String.class, "swversion", false, "SWVERSION");
        public final static Property Manufact = new Property(8, String.class, "manufact", false, "MANUFACT");
        public final static Property Linkquality = new Property(9, String.class, "linkquality", false, "LINKQUALITY");
        public final static Property Uid = new Property(10, String.class, "uid", false, "UID");
        public final static Property Lockversion = new Property(11, String.class, "lockversion", false, "LOCKVERSION");
    }


    public GatewayLockBaseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GatewayLockBaseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GATEWAY_LOCK_BASE_INFO\" (" + //
                "\"DEVICE_UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: deviceUId
                "\"GATEWAY_ID\" TEXT," + // 1: gatewayId
                "\"DEVICE_ID\" TEXT," + // 2: deviceId
                "\"MACADDR\" TEXT," + // 3: macaddr
                "\"MODEL\" TEXT," + // 4: model
                "\"FIRMWARE\" TEXT," + // 5: firmware
                "\"HWVERSION\" TEXT," + // 6: hwversion
                "\"SWVERSION\" TEXT," + // 7: swversion
                "\"MANUFACT\" TEXT," + // 8: manufact
                "\"LINKQUALITY\" TEXT," + // 9: linkquality
                "\"UID\" TEXT," + // 10: uid
                "\"LOCKVERSION\" TEXT);"); // 11: lockversion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GATEWAY_LOCK_BASE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GatewayLockBaseInfo entity) {
        stmt.clearBindings();
 
        String deviceUId = entity.getDeviceUId();
        if (deviceUId != null) {
            stmt.bindString(1, deviceUId);
        }
 
        String gatewayId = entity.getGatewayId();
        if (gatewayId != null) {
            stmt.bindString(2, gatewayId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String macaddr = entity.getMacaddr();
        if (macaddr != null) {
            stmt.bindString(4, macaddr);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(5, model);
        }
 
        String firmware = entity.getFirmware();
        if (firmware != null) {
            stmt.bindString(6, firmware);
        }
 
        String hwversion = entity.getHwversion();
        if (hwversion != null) {
            stmt.bindString(7, hwversion);
        }
 
        String swversion = entity.getSwversion();
        if (swversion != null) {
            stmt.bindString(8, swversion);
        }
 
        String manufact = entity.getManufact();
        if (manufact != null) {
            stmt.bindString(9, manufact);
        }
 
        String linkquality = entity.getLinkquality();
        if (linkquality != null) {
            stmt.bindString(10, linkquality);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(11, uid);
        }
 
        String lockversion = entity.getLockversion();
        if (lockversion != null) {
            stmt.bindString(12, lockversion);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GatewayLockBaseInfo entity) {
        stmt.clearBindings();
 
        String deviceUId = entity.getDeviceUId();
        if (deviceUId != null) {
            stmt.bindString(1, deviceUId);
        }
 
        String gatewayId = entity.getGatewayId();
        if (gatewayId != null) {
            stmt.bindString(2, gatewayId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String macaddr = entity.getMacaddr();
        if (macaddr != null) {
            stmt.bindString(4, macaddr);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(5, model);
        }
 
        String firmware = entity.getFirmware();
        if (firmware != null) {
            stmt.bindString(6, firmware);
        }
 
        String hwversion = entity.getHwversion();
        if (hwversion != null) {
            stmt.bindString(7, hwversion);
        }
 
        String swversion = entity.getSwversion();
        if (swversion != null) {
            stmt.bindString(8, swversion);
        }
 
        String manufact = entity.getManufact();
        if (manufact != null) {
            stmt.bindString(9, manufact);
        }
 
        String linkquality = entity.getLinkquality();
        if (linkquality != null) {
            stmt.bindString(10, linkquality);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(11, uid);
        }
 
        String lockversion = entity.getLockversion();
        if (lockversion != null) {
            stmt.bindString(12, lockversion);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GatewayLockBaseInfo readEntity(Cursor cursor, int offset) {
        GatewayLockBaseInfo entity = new GatewayLockBaseInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // deviceUId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gatewayId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // macaddr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // model
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // firmware
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hwversion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // swversion
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // manufact
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // linkquality
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // uid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // lockversion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GatewayLockBaseInfo entity, int offset) {
        entity.setDeviceUId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGatewayId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMacaddr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setModel(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirmware(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHwversion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSwversion(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setManufact(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setLinkquality(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setLockversion(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GatewayLockBaseInfo entity, long rowId) {
        return entity.getDeviceUId();
    }
    
    @Override
    public String getKey(GatewayLockBaseInfo entity) {
        if(entity != null) {
            return entity.getDeviceUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GatewayLockBaseInfo entity) {
        return entity.getDeviceUId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
