package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.utils.greenDao.bean.PirDefault;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PIR_DEFAULT".
*/
public class PirDefaultDao extends AbstractDao<PirDefault, Long> {

    public static final String TABLENAME = "PIR_DEFAULT";

    /**
     * Properties of entity PirDefault.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Periodtime = new Property(2, int.class, "periodtime", false, "PERIODTIME");
        public final static Property Threshold = new Property(3, int.class, "threshold", false, "THRESHOLD");
        public final static Property Protecttime = new Property(4, int.class, "protecttime", false, "PROTECTTIME");
        public final static Property Ust = new Property(5, int.class, "ust", false, "UST");
        public final static Property Maxprohibition = new Property(6, int.class, "maxprohibition", false, "MAXPROHIBITION");
        public final static Property Enable = new Property(7, int.class, "enable", false, "ENABLE");
    }


    public PirDefaultDao(DaoConfig config) {
        super(config);
    }
    
    public PirDefaultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PIR_DEFAULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_ID\" TEXT," + // 1: deviceId
                "\"PERIODTIME\" INTEGER NOT NULL ," + // 2: periodtime
                "\"THRESHOLD\" INTEGER NOT NULL ," + // 3: threshold
                "\"PROTECTTIME\" INTEGER NOT NULL ," + // 4: protecttime
                "\"UST\" INTEGER NOT NULL ," + // 5: ust
                "\"MAXPROHIBITION\" INTEGER NOT NULL ," + // 6: maxprohibition
                "\"ENABLE\" INTEGER NOT NULL );"); // 7: enable
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PIR_DEFAULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PirDefault entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
        stmt.bindLong(3, entity.getPeriodtime());
        stmt.bindLong(4, entity.getThreshold());
        stmt.bindLong(5, entity.getProtecttime());
        stmt.bindLong(6, entity.getUst());
        stmt.bindLong(7, entity.getMaxprohibition());
        stmt.bindLong(8, entity.getEnable());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PirDefault entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
        stmt.bindLong(3, entity.getPeriodtime());
        stmt.bindLong(4, entity.getThreshold());
        stmt.bindLong(5, entity.getProtecttime());
        stmt.bindLong(6, entity.getUst());
        stmt.bindLong(7, entity.getMaxprohibition());
        stmt.bindLong(8, entity.getEnable());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PirDefault readEntity(Cursor cursor, int offset) {
        PirDefault entity = new PirDefault( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceId
            cursor.getInt(offset + 2), // periodtime
            cursor.getInt(offset + 3), // threshold
            cursor.getInt(offset + 4), // protecttime
            cursor.getInt(offset + 5), // ust
            cursor.getInt(offset + 6), // maxprohibition
            cursor.getInt(offset + 7) // enable
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PirDefault entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPeriodtime(cursor.getInt(offset + 2));
        entity.setThreshold(cursor.getInt(offset + 3));
        entity.setProtecttime(cursor.getInt(offset + 4));
        entity.setUst(cursor.getInt(offset + 5));
        entity.setMaxprohibition(cursor.getInt(offset + 6));
        entity.setEnable(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PirDefault entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PirDefault entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PirDefault entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
