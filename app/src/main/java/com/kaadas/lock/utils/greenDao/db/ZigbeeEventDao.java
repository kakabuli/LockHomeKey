package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.utils.greenDao.bean.ZigbeeEvent;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZIGBEE_EVENT".
*/
public class ZigbeeEventDao extends AbstractDao<ZigbeeEvent, Long> {

    public static final String TABLENAME = "ZIGBEE_EVENT";

    /**
     * Properties of entity ZigbeeEvent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceType = new Property(1, int.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property DeviceId = new Property(2, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property EventType = new Property(3, int.class, "eventType", false, "EVENT_TYPE");
        public final static Property EventTime = new Property(4, long.class, "eventTime", false, "EVENT_TIME");
    }


    public ZigbeeEventDao(DaoConfig config) {
        super(config);
    }
    
    public ZigbeeEventDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZIGBEE_EVENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_TYPE\" INTEGER NOT NULL ," + // 1: deviceType
                "\"DEVICE_ID\" TEXT," + // 2: deviceId
                "\"EVENT_TYPE\" INTEGER NOT NULL ," + // 3: eventType
                "\"EVENT_TIME\" INTEGER NOT NULL );"); // 4: eventTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZIGBEE_EVENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZigbeeEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDeviceType());
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
        stmt.bindLong(4, entity.getEventType());
        stmt.bindLong(5, entity.getEventTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZigbeeEvent entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDeviceType());
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
        stmt.bindLong(4, entity.getEventType());
        stmt.bindLong(5, entity.getEventTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ZigbeeEvent readEntity(Cursor cursor, int offset) {
        ZigbeeEvent entity = new ZigbeeEvent( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // deviceType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceId
            cursor.getInt(offset + 3), // eventType
            cursor.getLong(offset + 4) // eventTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZigbeeEvent entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceType(cursor.getInt(offset + 1));
        entity.setDeviceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEventType(cursor.getInt(offset + 3));
        entity.setEventTime(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ZigbeeEvent entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ZigbeeEvent entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZigbeeEvent entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
