package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.utils.greenDao.bean.GatewayServiceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GATEWAY_SERVICE_INFO".
*/
public class GatewayServiceInfoDao extends AbstractDao<GatewayServiceInfo, String> {

    public static final String TABLENAME = "GATEWAY_SERVICE_INFO";

    /**
     * Properties of entity GatewayServiceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DeviceIdUid = new Property(0, String.class, "deviceIdUid", true, "DEVICE_ID_UID");
        public final static Property DeviceSN = new Property(1, String.class, "deviceSN", false, "DEVICE_SN");
        public final static Property DeviceNickName = new Property(2, String.class, "deviceNickName", false, "DEVICE_NICK_NAME");
        public final static Property Adminuid = new Property(3, String.class, "adminuid", false, "ADMINUID");
        public final static Property AdminName = new Property(4, String.class, "adminName", false, "ADMIN_NAME");
        public final static Property AdminNickname = new Property(5, String.class, "adminNickname", false, "ADMIN_NICKNAME");
        public final static Property IsAdmin = new Property(6, int.class, "isAdmin", false, "IS_ADMIN");
        public final static Property MeUsername = new Property(7, String.class, "meUsername", false, "ME_USERNAME");
        public final static Property MePwd = new Property(8, String.class, "mePwd", false, "ME_PWD");
        public final static Property MeBindState = new Property(9, int.class, "meBindState", false, "ME_BIND_STATE");
        public final static Property Uid = new Property(10, String.class, "uid", false, "UID");
        public final static Property Model = new Property(11, String.class, "model", false, "MODEL");
    }


    public GatewayServiceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public GatewayServiceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GATEWAY_SERVICE_INFO\" (" + //
                "\"DEVICE_ID_UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: deviceIdUid
                "\"DEVICE_SN\" TEXT," + // 1: deviceSN
                "\"DEVICE_NICK_NAME\" TEXT," + // 2: deviceNickName
                "\"ADMINUID\" TEXT," + // 3: adminuid
                "\"ADMIN_NAME\" TEXT," + // 4: adminName
                "\"ADMIN_NICKNAME\" TEXT," + // 5: adminNickname
                "\"IS_ADMIN\" INTEGER NOT NULL ," + // 6: isAdmin
                "\"ME_USERNAME\" TEXT," + // 7: meUsername
                "\"ME_PWD\" TEXT," + // 8: mePwd
                "\"ME_BIND_STATE\" INTEGER NOT NULL ," + // 9: meBindState
                "\"UID\" TEXT," + // 10: uid
                "\"MODEL\" TEXT);"); // 11: model
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GATEWAY_SERVICE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GatewayServiceInfo entity) {
        stmt.clearBindings();
 
        String deviceIdUid = entity.getDeviceIdUid();
        if (deviceIdUid != null) {
            stmt.bindString(1, deviceIdUid);
        }
 
        String deviceSN = entity.getDeviceSN();
        if (deviceSN != null) {
            stmt.bindString(2, deviceSN);
        }
 
        String deviceNickName = entity.getDeviceNickName();
        if (deviceNickName != null) {
            stmt.bindString(3, deviceNickName);
        }
 
        String adminuid = entity.getAdminuid();
        if (adminuid != null) {
            stmt.bindString(4, adminuid);
        }
 
        String adminName = entity.getAdminName();
        if (adminName != null) {
            stmt.bindString(5, adminName);
        }
 
        String adminNickname = entity.getAdminNickname();
        if (adminNickname != null) {
            stmt.bindString(6, adminNickname);
        }
        stmt.bindLong(7, entity.getIsAdmin());
 
        String meUsername = entity.getMeUsername();
        if (meUsername != null) {
            stmt.bindString(8, meUsername);
        }
 
        String mePwd = entity.getMePwd();
        if (mePwd != null) {
            stmt.bindString(9, mePwd);
        }
        stmt.bindLong(10, entity.getMeBindState());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(11, uid);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(12, model);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GatewayServiceInfo entity) {
        stmt.clearBindings();
 
        String deviceIdUid = entity.getDeviceIdUid();
        if (deviceIdUid != null) {
            stmt.bindString(1, deviceIdUid);
        }
 
        String deviceSN = entity.getDeviceSN();
        if (deviceSN != null) {
            stmt.bindString(2, deviceSN);
        }
 
        String deviceNickName = entity.getDeviceNickName();
        if (deviceNickName != null) {
            stmt.bindString(3, deviceNickName);
        }
 
        String adminuid = entity.getAdminuid();
        if (adminuid != null) {
            stmt.bindString(4, adminuid);
        }
 
        String adminName = entity.getAdminName();
        if (adminName != null) {
            stmt.bindString(5, adminName);
        }
 
        String adminNickname = entity.getAdminNickname();
        if (adminNickname != null) {
            stmt.bindString(6, adminNickname);
        }
        stmt.bindLong(7, entity.getIsAdmin());
 
        String meUsername = entity.getMeUsername();
        if (meUsername != null) {
            stmt.bindString(8, meUsername);
        }
 
        String mePwd = entity.getMePwd();
        if (mePwd != null) {
            stmt.bindString(9, mePwd);
        }
        stmt.bindLong(10, entity.getMeBindState());
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(11, uid);
        }
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(12, model);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public GatewayServiceInfo readEntity(Cursor cursor, int offset) {
        GatewayServiceInfo entity = new GatewayServiceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // deviceIdUid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceSN
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceNickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // adminuid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // adminName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // adminNickname
            cursor.getInt(offset + 6), // isAdmin
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // meUsername
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mePwd
            cursor.getInt(offset + 9), // meBindState
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // uid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // model
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GatewayServiceInfo entity, int offset) {
        entity.setDeviceIdUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeviceSN(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAdminuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAdminName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdminNickname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsAdmin(cursor.getInt(offset + 6));
        entity.setMeUsername(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMePwd(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMeBindState(cursor.getInt(offset + 9));
        entity.setUid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setModel(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(GatewayServiceInfo entity, long rowId) {
        return entity.getDeviceIdUid();
    }
    
    @Override
    public String getKey(GatewayServiceInfo entity) {
        if(entity != null) {
            return entity.getDeviceIdUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GatewayServiceInfo entity) {
        return entity.getDeviceIdUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
