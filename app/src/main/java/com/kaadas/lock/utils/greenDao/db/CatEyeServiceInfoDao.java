package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.utils.greenDao.bean.CatEyeServiceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAT_EYE_SERVICE_INFO".
*/
public class CatEyeServiceInfoDao extends AbstractDao<CatEyeServiceInfo, String> {

    public static final String TABLENAME = "CAT_EYE_SERVICE_INFO";

    /**
     * Properties of entity CatEyeServiceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DeviceIdUid = new Property(0, String.class, "deviceIdUid", true, "DEVICE_ID_UID");
        public final static Property DeviceId = new Property(1, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property SW = new Property(2, String.class, "SW", false, "SW");
        public final static Property Device_type = new Property(3, String.class, "device_type", false, "DEVICE_TYPE");
        public final static Property Event_str = new Property(4, String.class, "event_str", false, "EVENT_STR");
        public final static Property Ipaddr = new Property(5, String.class, "ipaddr", false, "IPADDR");
        public final static Property Macaddr = new Property(6, String.class, "macaddr", false, "MACADDR");
        public final static Property NickName = new Property(7, String.class, "nickName", false, "NICK_NAME");
        public final static Property Time = new Property(8, String.class, "time", false, "TIME");
        public final static Property GatewayId = new Property(9, String.class, "gatewayId", false, "GATEWAY_ID");
        public final static Property Uid = new Property(10, String.class, "uid", false, "UID");
        public final static Property DelectTime = new Property(11, String.class, "delectTime", false, "DELECT_TIME");
        public final static Property Lockversion = new Property(12, String.class, "lockversion", false, "LOCKVERSION");
        public final static Property Moduletype = new Property(13, String.class, "moduletype", false, "MODULETYPE");
        public final static Property Nwaddr = new Property(14, int.class, "nwaddr", false, "NWADDR");
        public final static Property OfflineTime = new Property(15, String.class, "offlineTime", false, "OFFLINE_TIME");
        public final static Property OnlineTime = new Property(16, String.class, "onlineTime", false, "ONLINE_TIME");
        public final static Property ShareFlag = new Property(17, int.class, "shareFlag", false, "SHARE_FLAG");
        public final static Property PushSwitch = new Property(18, int.class, "pushSwitch", false, "PUSH_SWITCH");
    }


    public CatEyeServiceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public CatEyeServiceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAT_EYE_SERVICE_INFO\" (" + //
                "\"DEVICE_ID_UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: deviceIdUid
                "\"DEVICE_ID\" TEXT," + // 1: deviceId
                "\"SW\" TEXT," + // 2: SW
                "\"DEVICE_TYPE\" TEXT," + // 3: device_type
                "\"EVENT_STR\" TEXT," + // 4: event_str
                "\"IPADDR\" TEXT," + // 5: ipaddr
                "\"MACADDR\" TEXT," + // 6: macaddr
                "\"NICK_NAME\" TEXT," + // 7: nickName
                "\"TIME\" TEXT," + // 8: time
                "\"GATEWAY_ID\" TEXT," + // 9: gatewayId
                "\"UID\" TEXT," + // 10: uid
                "\"DELECT_TIME\" TEXT," + // 11: delectTime
                "\"LOCKVERSION\" TEXT," + // 12: lockversion
                "\"MODULETYPE\" TEXT," + // 13: moduletype
                "\"NWADDR\" INTEGER NOT NULL ," + // 14: nwaddr
                "\"OFFLINE_TIME\" TEXT," + // 15: offlineTime
                "\"ONLINE_TIME\" TEXT," + // 16: onlineTime
                "\"SHARE_FLAG\" INTEGER NOT NULL ," + // 17: shareFlag
                "\"PUSH_SWITCH\" INTEGER NOT NULL );"); // 18: pushSwitch
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAT_EYE_SERVICE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CatEyeServiceInfo entity) {
        stmt.clearBindings();
 
        String deviceIdUid = entity.getDeviceIdUid();
        if (deviceIdUid != null) {
            stmt.bindString(1, deviceIdUid);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String SW = entity.getSW();
        if (SW != null) {
            stmt.bindString(3, SW);
        }
 
        String device_type = entity.getDevice_type();
        if (device_type != null) {
            stmt.bindString(4, device_type);
        }
 
        String event_str = entity.getEvent_str();
        if (event_str != null) {
            stmt.bindString(5, event_str);
        }
 
        String ipaddr = entity.getIpaddr();
        if (ipaddr != null) {
            stmt.bindString(6, ipaddr);
        }
 
        String macaddr = entity.getMacaddr();
        if (macaddr != null) {
            stmt.bindString(7, macaddr);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(8, nickName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String gatewayId = entity.getGatewayId();
        if (gatewayId != null) {
            stmt.bindString(10, gatewayId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(11, uid);
        }
 
        String delectTime = entity.getDelectTime();
        if (delectTime != null) {
            stmt.bindString(12, delectTime);
        }
 
        String lockversion = entity.getLockversion();
        if (lockversion != null) {
            stmt.bindString(13, lockversion);
        }
 
        String moduletype = entity.getModuletype();
        if (moduletype != null) {
            stmt.bindString(14, moduletype);
        }
        stmt.bindLong(15, entity.getNwaddr());
 
        String offlineTime = entity.getOfflineTime();
        if (offlineTime != null) {
            stmt.bindString(16, offlineTime);
        }
 
        String onlineTime = entity.getOnlineTime();
        if (onlineTime != null) {
            stmt.bindString(17, onlineTime);
        }
        stmt.bindLong(18, entity.getShareFlag());
        stmt.bindLong(19, entity.getPushSwitch());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CatEyeServiceInfo entity) {
        stmt.clearBindings();
 
        String deviceIdUid = entity.getDeviceIdUid();
        if (deviceIdUid != null) {
            stmt.bindString(1, deviceIdUid);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(2, deviceId);
        }
 
        String SW = entity.getSW();
        if (SW != null) {
            stmt.bindString(3, SW);
        }
 
        String device_type = entity.getDevice_type();
        if (device_type != null) {
            stmt.bindString(4, device_type);
        }
 
        String event_str = entity.getEvent_str();
        if (event_str != null) {
            stmt.bindString(5, event_str);
        }
 
        String ipaddr = entity.getIpaddr();
        if (ipaddr != null) {
            stmt.bindString(6, ipaddr);
        }
 
        String macaddr = entity.getMacaddr();
        if (macaddr != null) {
            stmt.bindString(7, macaddr);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(8, nickName);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(9, time);
        }
 
        String gatewayId = entity.getGatewayId();
        if (gatewayId != null) {
            stmt.bindString(10, gatewayId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(11, uid);
        }
 
        String delectTime = entity.getDelectTime();
        if (delectTime != null) {
            stmt.bindString(12, delectTime);
        }
 
        String lockversion = entity.getLockversion();
        if (lockversion != null) {
            stmt.bindString(13, lockversion);
        }
 
        String moduletype = entity.getModuletype();
        if (moduletype != null) {
            stmt.bindString(14, moduletype);
        }
        stmt.bindLong(15, entity.getNwaddr());
 
        String offlineTime = entity.getOfflineTime();
        if (offlineTime != null) {
            stmt.bindString(16, offlineTime);
        }
 
        String onlineTime = entity.getOnlineTime();
        if (onlineTime != null) {
            stmt.bindString(17, onlineTime);
        }
        stmt.bindLong(18, entity.getShareFlag());
        stmt.bindLong(19, entity.getPushSwitch());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CatEyeServiceInfo readEntity(Cursor cursor, int offset) {
        CatEyeServiceInfo entity = new CatEyeServiceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // deviceIdUid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // SW
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // device_type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // event_str
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ipaddr
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // macaddr
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nickName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // gatewayId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // uid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // delectTime
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lockversion
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // moduletype
            cursor.getInt(offset + 14), // nwaddr
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // offlineTime
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // onlineTime
            cursor.getInt(offset + 17), // shareFlag
            cursor.getInt(offset + 18) // pushSwitch
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CatEyeServiceInfo entity, int offset) {
        entity.setDeviceIdUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeviceId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSW(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDevice_type(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEvent_str(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIpaddr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMacaddr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNickName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setGatewayId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDelectTime(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLockversion(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setModuletype(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setNwaddr(cursor.getInt(offset + 14));
        entity.setOfflineTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setOnlineTime(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setShareFlag(cursor.getInt(offset + 17));
        entity.setPushSwitch(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CatEyeServiceInfo entity, long rowId) {
        return entity.getDeviceIdUid();
    }
    
    @Override
    public String getKey(CatEyeServiceInfo entity) {
        if(entity != null) {
            return entity.getDeviceIdUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CatEyeServiceInfo entity) {
        return entity.getDeviceIdUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
