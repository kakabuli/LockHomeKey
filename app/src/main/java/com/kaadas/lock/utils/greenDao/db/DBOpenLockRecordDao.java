package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.utils.greenDao.bean.DBOpenLockRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DBOPEN_LOCK_RECORD".
*/
public class DBOpenLockRecordDao extends AbstractDao<DBOpenLockRecord, Long> {

    public static final String TABLENAME = "DBOPEN_LOCK_RECORD";

    /**
     * Properties of entity DBOpenLockRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_num = new Property(1, String.class, "user_num", false, "USER_NUM");
        public final static Property Open_type = new Property(2, String.class, "open_type", false, "OPEN_TYPE");
        public final static Property Open_time = new Property(3, String.class, "open_time", false, "OPEN_TIME");
        public final static Property Index = new Property(4, int.class, "index", false, "INDEX");
    }


    public DBOpenLockRecordDao(DaoConfig config) {
        super(config);
    }
    
    public DBOpenLockRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DBOPEN_LOCK_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NUM\" TEXT," + // 1: user_num
                "\"OPEN_TYPE\" TEXT," + // 2: open_type
                "\"OPEN_TIME\" TEXT," + // 3: open_time
                "\"INDEX\" INTEGER NOT NULL );"); // 4: index
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DBOPEN_LOCK_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DBOpenLockRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_num = entity.getUser_num();
        if (user_num != null) {
            stmt.bindString(2, user_num);
        }
 
        String open_type = entity.getOpen_type();
        if (open_type != null) {
            stmt.bindString(3, open_type);
        }
 
        String open_time = entity.getOpen_time();
        if (open_time != null) {
            stmt.bindString(4, open_time);
        }
        stmt.bindLong(5, entity.getIndex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DBOpenLockRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String user_num = entity.getUser_num();
        if (user_num != null) {
            stmt.bindString(2, user_num);
        }
 
        String open_type = entity.getOpen_type();
        if (open_type != null) {
            stmt.bindString(3, open_type);
        }
 
        String open_time = entity.getOpen_time();
        if (open_time != null) {
            stmt.bindString(4, open_time);
        }
        stmt.bindLong(5, entity.getIndex());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DBOpenLockRecord readEntity(Cursor cursor, int offset) {
        DBOpenLockRecord entity = new DBOpenLockRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_num
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // open_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // open_time
            cursor.getInt(offset + 4) // index
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DBOpenLockRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_num(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOpen_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOpen_time(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIndex(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DBOpenLockRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DBOpenLockRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DBOpenLockRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
