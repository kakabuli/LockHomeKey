package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.utils.greenDao.bean.GatewayLockAlarmEventDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GATEWAY_LOCK_ALARM_EVENT_DAO".
*/
public class GatewayLockAlarmEventDaoDao extends AbstractDao<GatewayLockAlarmEventDao, Long> {

    public static final String TABLENAME = "GATEWAY_LOCK_ALARM_EVENT_DAO";

    /**
     * Properties of entity GatewayLockAlarmEventDao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property GatewayId = new Property(1, String.class, "gatewayId", false, "GATEWAY_ID");
        public final static Property DeviceId = new Property(2, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property TimeStamp = new Property(3, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Devtype = new Property(4, String.class, "devtype", false, "DEVTYPE");
        public final static Property AlarmCode = new Property(5, int.class, "alarmCode", false, "ALARM_CODE");
        public final static Property ClusterID = new Property(6, int.class, "clusterID", false, "CLUSTER_ID");
        public final static Property Eventcode = new Property(7, int.class, "eventcode", false, "EVENTCODE");
    }


    public GatewayLockAlarmEventDaoDao(DaoConfig config) {
        super(config);
    }
    
    public GatewayLockAlarmEventDaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GATEWAY_LOCK_ALARM_EVENT_DAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"GATEWAY_ID\" TEXT," + // 1: gatewayId
                "\"DEVICE_ID\" TEXT," + // 2: deviceId
                "\"TIME_STAMP\" TEXT," + // 3: timeStamp
                "\"DEVTYPE\" TEXT," + // 4: devtype
                "\"ALARM_CODE\" INTEGER NOT NULL ," + // 5: alarmCode
                "\"CLUSTER_ID\" INTEGER NOT NULL ," + // 6: clusterID
                "\"EVENTCODE\" INTEGER NOT NULL );"); // 7: eventcode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GATEWAY_LOCK_ALARM_EVENT_DAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GatewayLockAlarmEventDao entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String gatewayId = entity.getGatewayId();
        if (gatewayId != null) {
            stmt.bindString(2, gatewayId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(4, timeStamp);
        }
 
        String devtype = entity.getDevtype();
        if (devtype != null) {
            stmt.bindString(5, devtype);
        }
        stmt.bindLong(6, entity.getAlarmCode());
        stmt.bindLong(7, entity.getClusterID());
        stmt.bindLong(8, entity.getEventcode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GatewayLockAlarmEventDao entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String gatewayId = entity.getGatewayId();
        if (gatewayId != null) {
            stmt.bindString(2, gatewayId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(3, deviceId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(4, timeStamp);
        }
 
        String devtype = entity.getDevtype();
        if (devtype != null) {
            stmt.bindString(5, devtype);
        }
        stmt.bindLong(6, entity.getAlarmCode());
        stmt.bindLong(7, entity.getClusterID());
        stmt.bindLong(8, entity.getEventcode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public GatewayLockAlarmEventDao readEntity(Cursor cursor, int offset) {
        GatewayLockAlarmEventDao entity = new GatewayLockAlarmEventDao( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gatewayId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // timeStamp
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // devtype
            cursor.getInt(offset + 5), // alarmCode
            cursor.getInt(offset + 6), // clusterID
            cursor.getInt(offset + 7) // eventcode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GatewayLockAlarmEventDao entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setGatewayId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTimeStamp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDevtype(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAlarmCode(cursor.getInt(offset + 5));
        entity.setClusterID(cursor.getInt(offset + 6));
        entity.setEventcode(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GatewayLockAlarmEventDao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GatewayLockAlarmEventDao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GatewayLockAlarmEventDao entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
