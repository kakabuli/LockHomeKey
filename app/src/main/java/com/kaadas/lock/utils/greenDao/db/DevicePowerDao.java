package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.utils.greenDao.bean.DevicePower;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_POWER".
*/
public class DevicePowerDao extends AbstractDao<DevicePower, String> {

    public static final String TABLENAME = "DEVICE_POWER";

    /**
     * Properties of entity DevicePower.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DeviceIdUid = new Property(0, String.class, "deviceIdUid", true, "DEVICE_ID_UID");
        public final static Property DeviceSN = new Property(1, String.class, "deviceSN", false, "DEVICE_SN");
        public final static Property Power = new Property(2, int.class, "power", false, "POWER");
    }


    public DevicePowerDao(DaoConfig config) {
        super(config);
    }
    
    public DevicePowerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_POWER\" (" + //
                "\"DEVICE_ID_UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: deviceIdUid
                "\"DEVICE_SN\" TEXT," + // 1: deviceSN
                "\"POWER\" INTEGER NOT NULL );"); // 2: power
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_POWER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DevicePower entity) {
        stmt.clearBindings();
 
        String deviceIdUid = entity.getDeviceIdUid();
        if (deviceIdUid != null) {
            stmt.bindString(1, deviceIdUid);
        }
 
        String deviceSN = entity.getDeviceSN();
        if (deviceSN != null) {
            stmt.bindString(2, deviceSN);
        }
        stmt.bindLong(3, entity.getPower());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DevicePower entity) {
        stmt.clearBindings();
 
        String deviceIdUid = entity.getDeviceIdUid();
        if (deviceIdUid != null) {
            stmt.bindString(1, deviceIdUid);
        }
 
        String deviceSN = entity.getDeviceSN();
        if (deviceSN != null) {
            stmt.bindString(2, deviceSN);
        }
        stmt.bindLong(3, entity.getPower());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DevicePower readEntity(Cursor cursor, int offset) {
        DevicePower entity = new DevicePower( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // deviceIdUid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceSN
            cursor.getInt(offset + 2) // power
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DevicePower entity, int offset) {
        entity.setDeviceIdUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDeviceSN(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPower(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DevicePower entity, long rowId) {
        return entity.getDeviceIdUid();
    }
    
    @Override
    public String getKey(DevicePower entity) {
        if(entity != null) {
            return entity.getDeviceIdUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DevicePower entity) {
        return entity.getDeviceIdUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
