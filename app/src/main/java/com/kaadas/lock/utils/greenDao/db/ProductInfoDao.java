package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.publiclibrary.bean.ProductInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_INFO".
*/
public class ProductInfoDao extends AbstractDao<ProductInfo, Long> {

    public static final String TABLENAME = "PRODUCT_INFO";

    /**
     * Properties of entity ProductInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeviceID = new Property(1, String.class, "deviceID", false, "DEVICE_ID");
        public final static Property DevelopmentModel = new Property(2, String.class, "developmentModel", false, "DEVELOPMENT_MODEL");
        public final static Property ProductModel = new Property(3, String.class, "productModel", false, "PRODUCT_MODEL");
        public final static Property SnHead = new Property(4, String.class, "snHead", false, "SN_HEAD");
        public final static Property AdminUrl = new Property(5, String.class, "adminUrl", false, "ADMIN_URL");
        public final static Property DeviceListUrl = new Property(6, String.class, "deviceListUrl", false, "DEVICE_LIST_URL");
        public final static Property AuthUrl = new Property(7, String.class, "authUrl", false, "AUTH_URL");
        public final static Property AdminUrl1x = new Property(8, String.class, "adminUrl1x", false, "ADMIN_URL1X");
        public final static Property DeviceListUrl1x = new Property(9, String.class, "deviceListUrl1x", false, "DEVICE_LIST_URL1X");
        public final static Property AuthUrl1x = new Property(10, String.class, "authUrl1x", false, "AUTH_URL1X");
        public final static Property AdminUrl2x = new Property(11, String.class, "adminUrl2x", false, "ADMIN_URL2X");
        public final static Property DeviceListUrl2x = new Property(12, String.class, "deviceListUrl2x", false, "DEVICE_LIST_URL2X");
        public final static Property AuthUrl2x = new Property(13, String.class, "authUrl2x", false, "AUTH_URL2X");
        public final static Property AdminUrl3x = new Property(14, String.class, "adminUrl3x", false, "ADMIN_URL3X");
        public final static Property DeviceListUrl3x = new Property(15, String.class, "deviceListUrl3x", false, "DEVICE_LIST_URL3X");
        public final static Property AuthUrl3x = new Property(16, String.class, "authUrl3x", false, "AUTH_URL3X");
        public final static Property CreateTime = new Property(17, String.class, "createTime", false, "CREATE_TIME");
    }


    public ProductInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ProductInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DEVICE_ID\" TEXT," + // 1: deviceID
                "\"DEVELOPMENT_MODEL\" TEXT," + // 2: developmentModel
                "\"PRODUCT_MODEL\" TEXT," + // 3: productModel
                "\"SN_HEAD\" TEXT," + // 4: snHead
                "\"ADMIN_URL\" TEXT," + // 5: adminUrl
                "\"DEVICE_LIST_URL\" TEXT," + // 6: deviceListUrl
                "\"AUTH_URL\" TEXT," + // 7: authUrl
                "\"ADMIN_URL1X\" TEXT," + // 8: adminUrl1x
                "\"DEVICE_LIST_URL1X\" TEXT," + // 9: deviceListUrl1x
                "\"AUTH_URL1X\" TEXT," + // 10: authUrl1x
                "\"ADMIN_URL2X\" TEXT," + // 11: adminUrl2x
                "\"DEVICE_LIST_URL2X\" TEXT," + // 12: deviceListUrl2x
                "\"AUTH_URL2X\" TEXT," + // 13: authUrl2x
                "\"ADMIN_URL3X\" TEXT," + // 14: adminUrl3x
                "\"DEVICE_LIST_URL3X\" TEXT," + // 15: deviceListUrl3x
                "\"AUTH_URL3X\" TEXT," + // 16: authUrl3x
                "\"CREATE_TIME\" TEXT);"); // 17: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceID = entity.getDeviceID();
        if (deviceID != null) {
            stmt.bindString(2, deviceID);
        }
 
        String developmentModel = entity.getDevelopmentModel();
        if (developmentModel != null) {
            stmt.bindString(3, developmentModel);
        }
 
        String productModel = entity.getProductModel();
        if (productModel != null) {
            stmt.bindString(4, productModel);
        }
 
        String snHead = entity.getSnHead();
        if (snHead != null) {
            stmt.bindString(5, snHead);
        }
 
        String adminUrl = entity.getAdminUrl();
        if (adminUrl != null) {
            stmt.bindString(6, adminUrl);
        }
 
        String deviceListUrl = entity.getDeviceListUrl();
        if (deviceListUrl != null) {
            stmt.bindString(7, deviceListUrl);
        }
 
        String authUrl = entity.getAuthUrl();
        if (authUrl != null) {
            stmt.bindString(8, authUrl);
        }
 
        String adminUrl1x = entity.getAdminUrl1x();
        if (adminUrl1x != null) {
            stmt.bindString(9, adminUrl1x);
        }
 
        String deviceListUrl1x = entity.getDeviceListUrl1x();
        if (deviceListUrl1x != null) {
            stmt.bindString(10, deviceListUrl1x);
        }
 
        String authUrl1x = entity.getAuthUrl1x();
        if (authUrl1x != null) {
            stmt.bindString(11, authUrl1x);
        }
 
        String adminUrl2x = entity.getAdminUrl2x();
        if (adminUrl2x != null) {
            stmt.bindString(12, adminUrl2x);
        }
 
        String deviceListUrl2x = entity.getDeviceListUrl2x();
        if (deviceListUrl2x != null) {
            stmt.bindString(13, deviceListUrl2x);
        }
 
        String authUrl2x = entity.getAuthUrl2x();
        if (authUrl2x != null) {
            stmt.bindString(14, authUrl2x);
        }
 
        String adminUrl3x = entity.getAdminUrl3x();
        if (adminUrl3x != null) {
            stmt.bindString(15, adminUrl3x);
        }
 
        String deviceListUrl3x = entity.getDeviceListUrl3x();
        if (deviceListUrl3x != null) {
            stmt.bindString(16, deviceListUrl3x);
        }
 
        String authUrl3x = entity.getAuthUrl3x();
        if (authUrl3x != null) {
            stmt.bindString(17, authUrl3x);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(18, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deviceID = entity.getDeviceID();
        if (deviceID != null) {
            stmt.bindString(2, deviceID);
        }
 
        String developmentModel = entity.getDevelopmentModel();
        if (developmentModel != null) {
            stmt.bindString(3, developmentModel);
        }
 
        String productModel = entity.getProductModel();
        if (productModel != null) {
            stmt.bindString(4, productModel);
        }
 
        String snHead = entity.getSnHead();
        if (snHead != null) {
            stmt.bindString(5, snHead);
        }
 
        String adminUrl = entity.getAdminUrl();
        if (adminUrl != null) {
            stmt.bindString(6, adminUrl);
        }
 
        String deviceListUrl = entity.getDeviceListUrl();
        if (deviceListUrl != null) {
            stmt.bindString(7, deviceListUrl);
        }
 
        String authUrl = entity.getAuthUrl();
        if (authUrl != null) {
            stmt.bindString(8, authUrl);
        }
 
        String adminUrl1x = entity.getAdminUrl1x();
        if (adminUrl1x != null) {
            stmt.bindString(9, adminUrl1x);
        }
 
        String deviceListUrl1x = entity.getDeviceListUrl1x();
        if (deviceListUrl1x != null) {
            stmt.bindString(10, deviceListUrl1x);
        }
 
        String authUrl1x = entity.getAuthUrl1x();
        if (authUrl1x != null) {
            stmt.bindString(11, authUrl1x);
        }
 
        String adminUrl2x = entity.getAdminUrl2x();
        if (adminUrl2x != null) {
            stmt.bindString(12, adminUrl2x);
        }
 
        String deviceListUrl2x = entity.getDeviceListUrl2x();
        if (deviceListUrl2x != null) {
            stmt.bindString(13, deviceListUrl2x);
        }
 
        String authUrl2x = entity.getAuthUrl2x();
        if (authUrl2x != null) {
            stmt.bindString(14, authUrl2x);
        }
 
        String adminUrl3x = entity.getAdminUrl3x();
        if (adminUrl3x != null) {
            stmt.bindString(15, adminUrl3x);
        }
 
        String deviceListUrl3x = entity.getDeviceListUrl3x();
        if (deviceListUrl3x != null) {
            stmt.bindString(16, deviceListUrl3x);
        }
 
        String authUrl3x = entity.getAuthUrl3x();
        if (authUrl3x != null) {
            stmt.bindString(17, authUrl3x);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(18, createTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductInfo readEntity(Cursor cursor, int offset) {
        ProductInfo entity = new ProductInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deviceID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // developmentModel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // productModel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // snHead
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // adminUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // deviceListUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // authUrl
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // adminUrl1x
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // deviceListUrl1x
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // authUrl1x
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // adminUrl2x
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // deviceListUrl2x
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // authUrl2x
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // adminUrl3x
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // deviceListUrl3x
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // authUrl3x
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDevelopmentModel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setProductModel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSnHead(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAdminUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDeviceListUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAuthUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setAdminUrl1x(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeviceListUrl1x(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAuthUrl1x(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAdminUrl2x(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setDeviceListUrl2x(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAuthUrl2x(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAdminUrl3x(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setDeviceListUrl3x(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setAuthUrl3x(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCreateTime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
