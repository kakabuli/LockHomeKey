package com.kaadas.lock.utils.greenDao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kaadas.lock.utils.greenDao.bean.GatewayLockPwd;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GATEWAY_LOCK_PWD".
*/
public class GatewayLockPwdDao extends AbstractDao<GatewayLockPwd, Long> {

    public static final String TABLENAME = "GATEWAY_LOCK_PWD";

    /**
     * Properties of entity GatewayLockPwd.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property GatewayId = new Property(2, String.class, "gatewayId", false, "GATEWAY_ID");
        public final static Property DeviceId = new Property(3, String.class, "deviceId", false, "DEVICE_ID");
        public final static Property Num = new Property(4, String.class, "num", false, "NUM");
        public final static Property Time = new Property(5, int.class, "time", false, "TIME");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
    }


    public GatewayLockPwdDao(DaoConfig config) {
        super(config);
    }
    
    public GatewayLockPwdDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GATEWAY_LOCK_PWD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" TEXT," + // 1: uid
                "\"GATEWAY_ID\" TEXT," + // 2: gatewayId
                "\"DEVICE_ID\" TEXT," + // 3: deviceId
                "\"NUM\" TEXT," + // 4: num
                "\"TIME\" INTEGER NOT NULL ," + // 5: time
                "\"NAME\" TEXT," + // 6: name
                "\"STATUS\" INTEGER NOT NULL );"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GATEWAY_LOCK_PWD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GatewayLockPwd entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String gatewayId = entity.getGatewayId();
        if (gatewayId != null) {
            stmt.bindString(3, gatewayId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(5, num);
        }
        stmt.bindLong(6, entity.getTime());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GatewayLockPwd entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(2, uid);
        }
 
        String gatewayId = entity.getGatewayId();
        if (gatewayId != null) {
            stmt.bindString(3, gatewayId);
        }
 
        String deviceId = entity.getDeviceId();
        if (deviceId != null) {
            stmt.bindString(4, deviceId);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(5, num);
        }
        stmt.bindLong(6, entity.getTime());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GatewayLockPwd readEntity(Cursor cursor, int offset) {
        GatewayLockPwd entity = new GatewayLockPwd( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // gatewayId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // num
            cursor.getInt(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GatewayLockPwd entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGatewayId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNum(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.getInt(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GatewayLockPwd entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GatewayLockPwd entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GatewayLockPwd entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
